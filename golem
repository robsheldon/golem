#!/bin/bash
# This script should be located at /usr/local/sbin/golem

################################################################################
#                                                                              #
#    Globals                                                                   #
#                                                                              #
################################################################################

# restrict newly created files to read/write by this user only.
umask 077

# Batch (quiet) mode?
batch=0


################################################################################
#                                                                              #
#    Functions                                                                 #
#                                                                              #
################################################################################

##
# Return the path to the script file from either the cache or the script source
# directory whose name best matches the command the user wants to run.
# 
_find_cmd_file () {
    # Make sure the local "scripts" and ".cache" directories are present.
    mkdir -p "$scriptdir"/scripts
    mkdir -p "$scriptdir"/.cache
    for lookdir in ".cache" "scripts"; do
        # Iterate over the list of files in this directory from longest file
        # name to shortest.
        # The correct way to do this is to redirect the output from this nasty
        # series of commands as a redirect into `done`, e.g.:
        #     done < <(....)
        # But older verions of Bash vomit when you try that. Piping doesn't
        # work nicely on newer versions of Bash because it creates a subshell
        # which prevents later code from accessing any variables that are set,
        # exit doesn't work because the pipe is a subshell (it just exits the
        # pipe). So ... early return from a function!
        for scriptfile in "$scriptdir"/"$lookdir"/*; do echo ${#scriptfile} "$scriptfile"; done | sort -rn | cut -d " " -f 2 | while read -r filename; do
            # Convert the filename into a regular expression...
            regex=$(path_basename "$filename" | sed 's/_/[[:space:]]\\{1,\\}.*[[:space:]]*/g')
            # ...and then try to match it against the entered command.
            if echo "$*" | grep -q "^$regex"; then
                echo "$filename"
                return 0
            fi
        done
    done
    echo ""
    return 1
}


##
# Verify the integrity of the script cache: ensures the source file still exists,
# there's only one matching source file for the cache entry, and the timestamps
# still match. If any of these aren't true, then the cache gets updated or an
# error message is displayed and the command fails.
#
_cache_check () {
    file_basename="$1"
    # Locate matching source and cache file(s).
    sourcefiles=("$scriptdir"/scripts/"$file_basename".*)
    cachedfiles=("$scriptdir"/.cache/"$file_basename".*)
    # See if a cache update can be skipped.
    # The current version of bash should return a single-element array containing
    # the input glob if no matches were found, but future versions may change
    # this behavior.
    if [ ${#cachedfiles[@]} -eq 1 ] && [ ${#sourcefiles[@]} -eq 1 ] && [ "${cachedfiles[0]}" != "$scriptdir/.cache/$file_basename.*" ] && [ "${sourcefiles[0]}" != "$scriptdir/scripts/$file_basename.*" ]; then
        # Try a hash comparison first.
        cached_hash="$(head -n 10 "${cachedfiles[0]}" | grep -oP '(?<=^# source hash: )[0-9a-f]{32}')"
        if [ -n "$cached_hash" ] && [ "$cached_hash" = "$(md5sum "${sourcefiles[0]}" | grep -oP '^[0-9a-f]{32}')" ]; then
            # Good enough. This allows for timestamp mismatches between cached
            # scripts and their source files so long as the content of the source
            # file hasn't changed.
            echo "${cachedfiles[0]}"
            return 0
        fi
        # Hash not stored in cached script, or hash mismatch. Compare timestamps.
        cached_ts=$(date -r "${cachedfiles[0]}" '+%s')
        source_ts=$(date -r "${sourcefiles[0]}" '+%s')
        if [ "$cached_ts" = "$source_ts" ]; then
            # All checks passed, no update needed.
            echo "${cachedfiles[0]}"
            return 0
        fi
    fi
    # One of the above tests failed, so the cache needs to be updated.
    # shellcheck source=scripts/import_script.sh
    . "$scriptdir"/scripts/import_script.sh
    _import_script "${sourcefiles[0]}"
    return $?
}


##
# Translate a given command string into a matching script to be run.
#
_shell_resolve_cmd () {
    command_string="$*"
    i=5
    while [ $i -gt 0 ]; do
        i=$((i-1))
        matchfile=$(_find_cmd_file "$command_string")
        if [ -z "$matchfile" ]; then
            # Nothing found in either the scripts/ directory or the cache. The
            # caller will handle this with an error message.
            echo ""
            return 1
        fi
        matchcmd=$(path_basename "$matchfile")
        cachefile=$(_cache_check "$matchcmd") || exit 1
        if [ -z "$cachefile" ]; then
            # The cached file didn't survive inspection, so try finding another
            # matching command script.
            continue
        fi
        echo "$cachefile"
        [ -n "$cachefile" ]
        return $?
    done
    # This should never happen.
    fail "No matching script could be found for this command after 5 tries."
}


##
# The content between begin-golem-injected-code and end-golem-injected-code
# gets inserted into the top of cached shell scripts.
#
# If shellcheck is available, then the cached scripts get shellchecked before
# and after this code is inserted.
#

# begin-golem-injected-code

# Use any of these as necessary.
# shellcheck disable=SC2034
scriptname=$(basename "$_")
# shellcheck disable=SC2034
scriptpath=$(readlink -m "$0")
# shellcheck disable=SC2034
scriptdir=$(dirname "$scriptpath")
# shellcheck disable=SC2034
scriptshell=$(readlink /proc/$$/exe)

# Exit with an error if an undefined variable is referenced.
set -u

# If any command in a pipeline fails, that return code will be used as the
# return code for the whole pipeline.
set -o pipefail

# Halt with a non-zero exit status if a TERM signal is received by this PID.
# This is used by the fail() function along with $scriptpid.
trap "exit 1" TERM


##
# Return the filename component of a path; this is identical to calling
# "basename [path]"
#
path_filename () {
    local path=""
    path=$(realpath -s -m "$1")
    echo "${path##*/}"
}


##
# Return the parent directory of a path; this is identical to calling
# "dirname [path]", but it also cleans up extra slashes in the path.
#
path_directory () {
    local filename=""
    filename=$(path_filename "$1")
    realpath -s -m "${1%$filename}"
}


##
# Return the basename of the filename component of a path. For example, return
# "my_file" from "/path/to/my_file.txt".
#
path_basename () {
    local filename="" base="" ext=""
    filename=$(path_filename "$1")
    base="${filename%%.[^.]*}"
    ext="${filename:${#base} + 1}"
    if [ -z "$base" ] && [ -n "$ext" ]; then
        echo ".$ext"
    else
        echo "$base"
    fi
}


##
# Return the extension (suffix) of the filename component of a path. Example:
# return ".tar.gz" for "my_file.tar.gz", and "" for ".test".
#
path_extension () {
    local filename="" basename=""
    filename=$(path_filename "$1")
    basename=$(path_basename "$filename")
    echo "${filename##$basename}"
}


##
# Generate a pseudorandom string. Accepts an argument for the length of the
# string; if no string length is provided, then it defaults to generating a
# string between 12 and 25 characters long.
#
# Similar-looking characters are filtered out of the result string.
#
random_string () {
    local -i num_chars=0
    if [ $# -gt 0 ]; then
        num_chars=$1
    else
        num_chars=$((12 + RANDOM % 12))
    fi
    tr -dc _A-Z-a-z-0-9 < /dev/urandom | tr -d '/+oO0lLiI1\n\r' | head -c $num_chars
}


##
# Write a message to stderr and continue execution.
#
warn () {
    echo "Warning: $*" | fmt -w 80 >&2
}


##
# Write a message to stderr and exit immediately with a non-zero code.
#
fail () {
    echo "ERROR: $*" | fmt -w 80 >&2
    pkill -TERM -g $$ "$scriptname" || kill TERM $$ >/dev/null 2>&1
    exit 1
}


##
# Ask the user a question and process the response, with options for defaults
# and timeouts.
#
ask () {
    # Options:
    #     --timeout N:     time out if there's no input for N seconds.
    #     --default ANS:   use ANS as the default answer on timeout or
    #                      if an empty answer is provided.
    #     --required:      don't accept a blank answer. Use this parameter
    #                      to make ask() accept any string.
    #
    # ask() gives the answer in its exit status, e.g.,
    # if ask "Continue?"; then ...
    local ans="" default="" prompt=""
    local -i timeout=0 required=0

    while [ $# -gt 0 ] && [[ "$1" ]]; do
        case "$1" in
            -d|--default)
                shift
                default=$1
                if [[ ! "$default" ]]; then warn "Missing default value"; fi
                default=$(tr '[:upper:]' '[:lower:]' <<< "$default")
                if [[ "$default" = "yes" ]]; then
                    default="y"
                elif [[ "$default" = "no" ]]; then
                    default="n"
                elif [ "$default" != "y" ] && [ "$default" != "n" ]; then
                    warn "Illegal default answer: $default"
                fi
                shift
            ;;

            -t|--timeout)
                shift
                if [[ ! "$1" ]]; then
                    warn "Missing timeout value"
                elif [[ ! "$1" =~ ^[0-9][0-9]*$ ]]; then
                    warn "Illegal timeout value: $1"
                else
                    timeout=$1
                fi
                shift
            ;;

            -r|--required)
                shift
                required=1
            ;;

            -*)
                warn "Unrecognized option: $1"
            ;;

            *)
                break
            ;;
        esac
    done

    # Sanity checks
    if [[ $timeout -ne 0  &&  ! "$default" ]]; then
        warn "ask(): Non-zero timeout requires a default answer"
        exit 1
    fi
    if [ $required -ne 0 ]; then
        if [ -n "$default" ] || [ "$timeout" -gt 0 ]; then
            warn "ask(): 'required' is not compatible with 'default' or 'timeout' parameters."
            exit 1
        fi
    fi
    if [[ ! "$*" ]]; then
        warn "Missing question"
        exit 1
    fi

    prompt="$*"
    if [ "$default" = "y" ]; then
        prompt="$prompt [Y/n] "
    elif [ "$default" = "n" ]; then
        prompt="$prompt [y/N] "
    elif [ $required -eq 1 ]; then
        prompt="$prompt (required) "
    else
        prompt="$prompt [y/n] "
    fi


    while [ -z "$ans" ]
    do
        if [[ $timeout -ne 0 ]]; then
            if ! read -r -t "$timeout" -p "$prompt" ans </dev/tty; then
                ans=$default
                echo
            else
                # Turn off timeout if answer entered.
                timeout=0
                if [[ ! "$ans" ]]; then ans=$default; fi
            fi
        else
            read -r -p "$prompt" ans <"$(tty)"
            if [[ ! "$ans" ]]; then
                if [ $required -eq 1 ]; then
                    warn "An answer is required."
                    ans=""
                else
                    ans=$default
                fi
            elif [ $required -eq 0 ]; then
                ans=$(tr '[:upper:]' '[:lower:]' <<< $ans)
                if [ "$ans" = "yes" ]; then
                    ans="y"
                elif [ "$ans" = "no" ]; then
                    ans="n"
                fi
            fi 
        fi

        if [ $required -eq 0 ]; then
            if [ "$ans" != 'y' ] && [ "$ans" != 'n' ]; then
                warn "Invalid answer. Please use y or n."
                ans=""
            fi
        fi
    done

    if [ $required -eq 1 ]; then
        echo $ans
        return 0
    fi

    [[ "$ans" = "y" || "$ans" == "yes" ]]
}


##
# Return the value of a named option passed from the commandline.
# If it doesn't exist, exit with a non-zero status.
# This function can be invoked like so:
#     if var="$(loadopt "foo")"; then...
# 
loadopt () {
    local varname="$1" value=""
    declare -i found=1
    # Run through the longopts array and search for a "varname".
    for i in "${longopts[@]}"; do
        if [ $found -eq 0 ]; then
            value="$i"
            break
        fi
        if [ "$i" = "--$varname" ]; then
            # Matched varname, set found here so that the next loop iteration
            # picks up varname's value.
            found=0
        fi
    done
    echo "$value"
    return $found
}


##
# Require a named value from the user. If the value wasn't specified as a longopt
# when the script was invoked, then needopt() will call ask() to request the value
# from the user. Use this to get required values for your scripts.
#
needopt () {
    # Usage:
    #     varname=$(needopt varname -p "Prompt to the user" -m [regex])
    local varname="" prompt="" match="" i="" found="" value=""
    while [ $# -gt 0 ] && [[ "$1" ]]; do
        case "$1" in
            -p)
                shift
                if [ $# -gt 0 ]; then
                    prompt="$1"
                    shift
                fi
            ;;
            -m)
                shift
                if [ $# -gt 0 ]; then
                    match="$1"
                    shift
                fi
            ;;
            -*)
                warn "Unrecognized option: $1"
            ;;
            *)
                if [ -z "$varname" ]; then
                    varname="$1"
                    shift
                else
                    fail "needopt(): Unexpected value: $1"
                fi
            ;;
        esac
    done
    if [ -z "$varname" ]; then
        fail "needopt(): No varname was provided"
    fi
    if [ -z "$prompt" ]; then
        prompt="$varname"
    fi
    if ! value="$(loadopt "$varname")" || [[ ! $value =~ $match ]]; then
        while true; do
            value="$(ask -r "$prompt")"
            if [ -n "$value" ] && [[ $value =~ $match ]]; then
                break
            elif [ -n "$match" ]; then
                warn "needopt(): this value doesn't match the expected regular expression: $match"
            fi
        done
    fi
    # printf -v "$varname" '%s' "$value"
    echo "$value"
    return 0
}


# Process arguments. Golem will load any "--variable value" pairs into the
# "longopts" array. Your command script can then call the needopt() function to
# load this value into a variable.
# Example: if your command script needs a "hostname" value, the user can supply
# that with, "golem --hostname 'host.name' your command", and the "your_command.sh"
# file can use "hostname=needopt(hostname)" to create a variable named "hostname"
# with the value "host.name" (or ask the user for it).
declare -a longopts=()
declare -a args=()
while [ $# -gt 0 ] && [[ "$1" ]]; do
    case "$1" in
        --)
            # Stop processing arguments.
            break
            ;;
        --*)
            if [ $# -lt 2 ]; then
                fail "Missing value for $1"
            fi
            longopts+=("$(printf '%s' "$1")")
            longopts+=("$(printf '%s' "$2")")
            shift 2
            ;;
        *)
            args+=("$1")
            shift
            ;;
    esac
done
# Reset the arguments list to every argument that wasn't a --longopt.
set -- "${args[@]}"
unset args


################################################################################
#                                                                              #
#    Main program                                                              #
#                                                                              #
################################################################################

# end-golem-injected-code


# Extract any destinations from the arguments list.
declare -a destinations=()
declare -a args=()
while [ $# -gt 0 ] && [[ "$1" ]]; do
    case "$1" in
        @*)
            destinations+=("${1:1}")
            shift
            ;;
        *)
            args+=("$1")
            shift
            ;;
    esac
done
set -- "${args[@]}"
unset args

if [ $# -lt 1 ]; then
    # TODO: Needs a help subsystem.
    fail "No command provided"
fi

# Start a new blank line before any output if not in batch mode.
if [ "$1" = "-b" ] || [ "$1" = "-q" ]; then
    batch=1
    shift
else
    echo
fi

# Check the environment.
# A "scripts" directory should be present in the parent directory.
# This doesn't get automatically fixed because it's indicative of something
# unusual about the environment.
if [ ! -d "$scriptdir/scripts" ]; then
    fail "The \"scripts\" directory is missing from \"$scriptdir\". It should have been included in the repository. Please create it manually."
fi
# The import_script.sh file should be present in scripts/.
if [ ! -f "$scriptdir/scripts/import_script.sh" ]; then
    fail "\"$scriptdir/scripts/import_script.sh\" is missing. It is required for script management. You can find a current copy at https://github.com/robsheldon/golem/"
fi
# The import_script.sh file should be executable.
if [ ! -x "$scriptdir/scripts/import_script.sh" ]; then
    fail "\"$scriptdir/scripts/import_script.sh\" is not executable. Please chmod it. You can find a current copy at https://github.com/robsheldon/golem/"
fi
# The .cache directory should exist because import_script.sh uses it to sanity-
# check the environment. This can be created if it's not present.
if [ ! -d "$scriptdir/.cache" ]; then
    if ! mkdir -p "$scriptdir/.cache"; then
        fail "\"$scriptdir/.cache doesn't exist and could not be created. Please create it manually and try again."
    fi
fi

if [ $# -gt 2 ] && [ "$1" = "import" ] && [ "$2" = "script" ]; then
    # Bootstrap a command script import. This bypasses the normal cache checks.
    # This is the only command script that is sourced instead of exec'd.
    # shellcheck source=scripts/import_script.sh
    . "$scriptdir"/scripts/import_script.sh
    # When invoked by the user, the "import script" words need to be shifted.
    shift; shift
    _import_script "$@"
else
    command_script=$(_shell_resolve_cmd "$*")
    if [ -z "$command_script" ]; then
        fail "No matching command script found for \"$*\""
    fi
    if [ ${#destinations[@]} -eq 0 ]; then
        # No remote destinations, run command script locally.
        $scriptshell "$command_script" "$(printf '%q ' "${longopts[@]}" "$@")"
    else
        # One or more remote destinations.
        # Start by converting the selected command script into a base64 blob.
        # This is because several different common approaches to executing
        # arbitrary shell scripts over ssh don't work well. After several hours
        # of trial and error, I found a better answer at this under-appreciated
        # comment on StackOverflow: https://unix.stackexchange.com/a/518960
        scripthack=$(base64 "$command_script" | tr -d '\n')
        for destination in "${destinations[@]}"; do
            # The destination should be defined in the user's local ssh config file.
            ssh_host=$(ssh -G "$destination" | grep -Pio '(?<=^hostname ).*$')
            if [ -z "$ssh_host" ]; then
                fail "your ssh configuration did not return a valid hostname for the remote destination $destination"
            fi
            hostaddr=$(ping -q -n -c 1 -t 1 -w 1 "$ssh_host" 2>&1 | head -n 1 | grep -Po "\\b$destination\\s+\\([^\\(\\)]+\\)")
            if [ -z "$hostaddr" ]; then
                # Try the hostname retrieved from the ssh config.
                hostaddr=$(ping -q -n -c 1 -t 1 -w 1 "$ssh_host" 2>&1 | head -n 1 | grep -Po "\\b$ssh_host\\s+\\([^\\(\\)]+\\)")
                if [ -z "$hostaddr" ]; then
                    fail "$destination could not be resolved to a valid network address"
                fi
            fi
            # Okay. Run this command script on a remote host.
            ssh -qt "$destination" /bin/bash "<(echo \"$scripthack\" | base64 --decode)" "$(printf '%q ' "${longopts[@]}" "$@")"
        done
    fi
fi

if [ $batch -eq 0 ]; then
    echo
fi
